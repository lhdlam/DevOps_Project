- name: This sets up an httpd webserver
  hosts: aws_ec2
  become: yes
  remote_user: ec2-user
  gather_facts: true
  vars:
    ansible_ssh_private_key_file: "/etc/ansible/aws-key-pair.pem"  
    ansible_ssh_user: "ec2-user"

  tasks:
    - name: Update package index and install dependencies
      yum:
        name:
          - httpd
          - unzip
          - python3
          - python3-virtualenv
          - git
          - nginx
        state: present
        update_cache: yes

    - name: Fetching the token for IMDSv2
      shell: |
        TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
        echo $TOKEN
      register: imds_token

    - name: Clone repository
      git:
        repo: https://github.com/lhdlam/Django-ECommerce-2024.git
        dest: /home/ec2-user/Django-ECommerce-2024
        force: yes

    - name: Create virtual environment
      command: python3 -m venv /home/ec2-user/Django-ECommerce-2024/venv
      args:
        creates: /home/ec2-user/Django-ECommerce-2024/venv

    - name: Install Python dependencies
      pip:
        requirements: /home/ec2-user/Django-ECommerce-2024/requirements.txt
        virtualenv: /home/ec2-user/Django-ECommerce-2024/venv

    - name: Install Gunicorn
      pip:
        name: gunicorn
        virtualenv: /home/ec2-user/Django-ECommerce-2024/venv

    - name: Create directory for Gunicorn logs
      file:
        path: /var/log/gunicorn
        state: directory

    - name: Create gunicorn socket file
      copy:
        dest: /etc/systemd/system/gunicorn.socket
        content: |
          [Unit]
          Description=gunicorn socket

          [Socket]
          ListenStream=/run/gunicorn.sock

          [Install]
          WantedBy=sockets.target

    - name: Create gunicorn service file
      copy:
        dest: /etc/systemd/system/gunicorn.service
        content: |
          [Unit]
          Description=gunicorn daemon
          After=network.target

          [Service]
          User=ec2-user
          Group=nginx
          WorkingDirectory=/home/ec2-user/Django-ECommerce-2024
          ExecStart=/home/ec2-user/Django-ECommerce-2024/venv/bin/gunicorn \
                  --access-logfile - \
                  --workers 3 \
                  --bind unix:/run/gunicorn.sock \
                  demo.wsgi:application

          [Install]
          WantedBy=multi-user.target

    - name: Start and enable gunicorn socket
      systemd:
        name: gunicorn.socket
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Create proxy_params file for Nginx
      copy:
        dest: /etc/nginx/proxy_params
        content: |
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

    - name: Run Django collectstatic command
      command: /home/ec2-user/Django-ECommerce-2024/venv/bin/python /home/ec2-user/Django-ECommerce-2024/manage.py collectstatic --noinput
      args:
        chdir: /home/ec2-user/Django-ECommerce-2024

    - name: Add nginx user to ec2-user group
      user:
        name: nginx
        groups: ec2-user
        append: yes

    # - name: Get public IPv4 address
    #   uri:
    #     url: http://169.254.169.254/latest/meta-data/public-ipv4
    #     headers:
    #       X-aws-ec2-metadata-token: "{{ imds_token.stdout }}"
    #   register: public_ip

    - name: Get IP address of the EC2 instance
      amazon.aws.ec2_instance_info:
        region: us-east-1
        filters:
          "tag:Name": "DjangoServer"
      register: ec2_info

    - name: Set the Django server IP
      set_fact:
        django_server_ip: "{{ ec2_info.instances[0].public_ip_address }}"

    - name: Create Nginx server block file
      template:
        dest: /etc/nginx/conf.d/django_website.conf
        src: /var/lib/jenkins/workspace/jenkins-project/Ansible/template/django_website.conf.j2
        mode: 0644
      vars:
        public_ip: "{{ django_server_ip }}"

    - name: Disable the default server block
      file:
        path: /etc/nginx/nginx.conf
        state: absent

    - name: Create a new default server block
      copy:
        dest: /etc/nginx/nginx.conf
        content: |
          user ec2-user;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          events {
              worker_connections 1024;
          }

          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;
              log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
              access_log /var/log/nginx/access.log main;
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;

              include /etc/nginx/conf.d/*.conf;
          }

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    # - name: Allow Nginx through firewall
    #   firewalld:
    #     port: 
    #       - "80/tcp"
    #       - "443/tcp"
    #     permanent: yes
    #     state: enabled

  handlers:
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded
