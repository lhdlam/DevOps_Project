- name: This sets up an httpd webserver
  hosts: aws_ec2
  become: yes
  remote_user: ec2-user
  gather_facts: true
  vars:
    ansible_ssh_private_key_file: "/etc/ansible/aws-key-pair.pem"  
    ansible_ssh_user: "ec2-user"
  tasks:
  - name: "Install httpd and php packages"
    package:
        name:
          - "httpd"- name: This sets up an httpd webserver
  hosts: aws_ec2
  become: yes
  remote_user: ec2-user
  gather_facts: true
  vars:
    ansible_ssh_private_key_file: "/etc/ansible/aws-key-pair.pem"
    ansible_ssh_user: "ec2-user"
  tasks:
    - name: Update package index and install required packages
      yum:
        name:
          - httpd
          - unzip
          - yum-utils
        state: present
        update_cache: yes

    - name: Enable EPEL repository
      yum:
        name: epel-release
        state: present

    - name: Add deadsnakes repository for Python 3.9
      yum_repository:
        name: deadsnakes
        description: "Repository for Python 3.9"
        baseurl: http://ppa.launchpad.net/deadsnakes/ppa/centos/7/
        gpgcheck: 0
        state: present

    - name: Install Python 3.9 and virtual environment package
      yum:
        name:
          - python39
          - python39-virtualenv
        state: present

    - name: Clone repository
      git:
        repo: https://github.com/lhdlam/Django-ECommerce-2024.git
        dest: /home/ec2-user/Django-ECommerce-2024
        clone: yes
        update: no

    - name: Create virtual environment
      command: python3.9 -m venv /home/ec2-user/Django-ECommerce-2024/venv
      args:
        creates: /home/ec2-user/Django-ECommerce-2024/venv

    - name: Activate virtual environment and install dependencies
      pip:
        requirements: /home/ec2-user/Django-ECommerce-2024/requirements.txt
        virtualenv: /home/ec2-user/Django-ECommerce-2024/venv

    - name: Install Gunicorn
      pip:
        name: gunicorn
        virtualenv: /home/ec2-user/Django-ECommerce-2024/venv

    - name: Create directory for Gunicorn logs
      file:
        path: /var/log/gunicorn
        state: directory

    - name: Create Gunicorn socket file
      copy:
        dest: /etc/systemd/system/gunicorn.socket
        content: |
          [Unit]
          Description=gunicorn socket

          [Socket]
          ListenStream=/run/gunicorn.sock

          [Install]
          WantedBy=sockets.target

    - name: Create Gunicorn service file
      copy:
        dest: /etc/systemd/system/gunicorn.service
        content: |
          [Unit]
          Description=gunicorn daemon
          After=network.target

          [Service]
          User=ec2-user
          Group=nginx
          WorkingDirectory=/home/ec2-user/Django-ECommerce-2024
          ExecStart=/home/ec2-user/Django-ECommerce-2024/venv/bin/gunicorn \
                    --access-logfile - \
                    --workers 3 \
                    --bind unix:/run/gunicorn.sock \
                    demo.wsgi:application

          [Install]
          WantedBy=multi-user.target

    - name: Start and enable Gunicorn socket
      systemd:
        name: gunicorn.socket
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Restart Gunicorn service
      systemd:
        name: gunicorn
        state: restarted
        daemon_reload: yes

    - name: Install Nginx
      yum:
        name: nginx
        state: present

    - name: Run Django collectstatic command
      command: python manage.py collectstatic --noinput
      args:
        chdir: /home/ec2-user/Django-ECommerce-2024
        creates: /home/ec2-user/Django-ECommerce-2024/static

    - name: Add nginx user to ec2-user group
      user:
        name: nginx
        groups: ec2-user
        append: yes

    - name: Fetch public IPv4 address using IMDSv2
      set_fact:
        token: "{{ lookup('community.general.http', 'http://169.254.169.254/latest/api/token', headers={'X-aws-ec2-metadata-token-ttl-seconds': '21600'}, method='PUT') }}"
        public_ip: "{{ lookup('community.general.http', 'http://169.254.169.254/latest/meta-data/public-ipv4', headers={'X-aws-ec2-metadata-token': token}) }}"

    - name: Create Nginx server block file
      template:
        dest: /etc/nginx/conf.d/django_website.conf
        content: |
          server {
              listen 80;
              server_name {{ public_ip }};

              location = /favicon.ico { access_log off; log_not_found off; }

              location / {
                  include proxy_params;
                  proxy_pass http://unix:/run/gunicorn.sock;
              }

              location /static/ {
                  root /home/ec2-user/Django-ECommerce-2024;
                  access_log off;
              }

              location /media/ {
                  root /home/ec2-user/Django-ECommerce-2024;
                  access_log off;
              }
          }

    - name: Stop Apache2 service
      service:
        name: httpd
        state: stopped

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Allow Nginx through firewall
      firewalld:
        service: http
        permanent: yes
        state: enabled
        immediate: yes

    - name: Reload Nginx
      command: nginx -s reload

          - "php"
        state: present
  - name: "copy code from GitHub"
    get_url:
        url: https://www.shubhammishra.in
        dest: "/var/www/html/index.php"
  - name: "Start httpd services"
    service:
        name: httpd
        state: started
  - name: Yum Install Packages
    yum: name={{item}} state=latest
    with_items:
       - wget
  - name: terraform install
    unarchive:
      src: https://releases.hashicorp.com/terraform/0.9.1/terraform_0.9.1_linux_amd64.zip
      dest: /usr/bin
      remote_src: True
